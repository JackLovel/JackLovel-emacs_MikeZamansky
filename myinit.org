#+STARTIP: overview 

* keyboard 
#+BEGIN_SRC emacs-lisp 
; C-c ' 修改emacs-lisp 区域内的代码
#+END_SRC
* interface tweaks 
#+BEGIN_SRC emacs-lisp 
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  ; 高亮所在行
  (global-hl-line-mode t)

  ; 
  (setq save-interprogram-paste-before-kill t)
  (global-auto-revert-mode 1)
  (setq auto-revert-verbose nil)
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

* try 
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

* which key 
  Brings up some help 
#+BEGIN_SRC emacs-lisp 
(use-package which-key
  :ensure t
  :config 
  (which-key-mode))
#+END_SRC 

* the rest 
#+BEGIN_SRC emacs-lisp
  ;; buffer switch: C-x b 
  (setq indo-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  ;; buffer 列表
  (defalias 'list-buffers 'ibuffer)


  ;; 窗口跳转
  ;; M-o 1
  (use-package ace-window
    :bind ("M-o" . ace-window)
    :ensure t
    :init
    (progn
     ;; (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))

  ;; it looks like counsel is a requirement for swiper
  (use-package counsel
    :ensure t)

  (use-package ivy 
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))

  ;; 搜索: swiper
  (use-package swiper
    :ensure try
    :bind (("C-s" . swiper)
	   ("C-r" . swiper)
	   ("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      ))

  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))

  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
#+END_SRC

* theme
#+BEGIN_SRC emacs-lisp 
(use-package zenburn-theme
  :ensure t
  :config (load-theme 'zenburn t)
  )

(load-theme 'leuven t)
#+END_SRC

* reveal.js 

#+BEGIN_SRC emacs-lisp 
(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)
#+END_SRC 
* flycheck 
#+BEGIN_SRC emacs-lisp 
(use-package flycheck
:ensure t
:init 
(global-flycheck-mode t)) 
#+END_SRC 
* python 
#+BEGIN_SRC emacs-lisp 
  (use-package jedi 
    :ensure t
    :init 
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup)) 


  (use-package elpy
    :ensure t 
    :config 
    (elpy-enable))

  (use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell))
#+END_SRC 
* yasnippet 
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
:ensure t
:init 
(progn
(yas-global-mode 1))) 
#+END_SRC 
* undo tree 
#+BEGIN_SRC emacs-lisp 
 (use-package undo-tree
:ensure t
:init
(global-undo-tree-mode))
#+END_SRC 
=======
#+BEGIN_SRC emacs-lisp 
(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)
#+END_SRC 
* flycheck 
#+BEGIN_SRC emacs-lisp 
(use-package flycheck
:ensure t
:init 
(global-flycheck-mode t)) 
#+END_SRC 
* python 
#+BEGIN_SRC emacs-lisp 
  (use-package jedi 
    :ensure t
    :init 
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup)) 


  (use-package elpy
    :ensure t 
    :config 
    (elpy-enable))

  (use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell))
#+END_SRC 
* yasnippet 
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
:ensure t
:init 
(progn
(yas-global-mode 1))) 
#+END_SRC 
* undo tree 
#+BEGIN_SRC emacs-lisp 
 (use-package undo-tree
:ensure t
:init
(global-undo-tree-mode))
#+END_SRC 

* misc packages 
#+BEGIN_SRC emacs-lisp 
(use-package beacon
:ensure t 
:config 
(beacon-mode 1)
;(setq beacon-color "#666600")
)

(use-package hungry-delete
:ensure t
:config 
(global-hungry-delete-mode))

; 选择一个范围里的内容
(use-package expand-region
:ensure t 
:config 
(global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

* iedit and narrow / widen dwim
#+BEGIN_SRC emacs-lisp 
(use-package iedit
:ensure t)

; 选中一个范围的内容，并拿出去添加修改
; C-x n 
(defun narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or defun,
  whichever applies first. Narrowing to org-src-block actually
  calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer is
  already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (not p) (buffer-narrowed-p))(widen))
        ((region-active-p)
         (narrow-to-region (region-beginning) (region-end)))
        ((derived-mode-p 'org-mode)
         (cond ((ignore-errors (org-edit-src-code))
	 (delete-other-windows))
	 ((org-at-block-p)
	 (org-narrow-to-block))
	 (t (org-narrow-to-subtree))))
	 (t (narrow-to-defun))))
	 
	 (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
#+END_SRC
* load other files
#+BEGIN_SRC emacs-lisp 
  (defun load-if-exists (f)
    "检测文件是否存在"
    (if (file-readable-p f)
	(load-file f)))

  (load-if-exists "something.el")
#+END_SRC
* web mode
#+BEGIN_SRC emacs-lisp 
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist 
	  '(("django" . "\\.html\\'")))
    (setq web-mode-ac-sources-alist
	  '(("css" . (ac-source-css-property))
	     ("html". (ac-source-words-in-buffer ac-source-abbrev))))
     (setq web-mode-enable-auto-closing t))
#+END_SRC 
* org mode 
#+BEGIN_SRC emacs-lisp 
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (custom-set-variables
   '(org-directory "~/Dropbox/orgfiles")
   '(org-default-notes-file (concat org-directory "/notes.org"))
   '(org-export-html-postamble nil)
   '(org-hide-leading-stars t)
   '(org-startup-folded (quote overview))
   '(org-startup-indented t))

  ;(setq org-file-apps
  ;      (append '(
  ;                ("\\.pdf'\\" . evince %s)
                                          ;                ("\\.x?html?\\'" . "/usr/bin/firefox %s")
                                          ;               ) org-file-apps ))

  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

#+END_SRC
* shell 
#+BEGIN_SRC emacs-lisp 
  (use-package better-shell
    :ensure t
    :bind
    (("C-'" . better-shell-shell) ;open shell 
     ("C-;" . better-shell-remote-open)))
#+END_SRC

* c++ 
#+BEGIN_SRC emacs-lisp 
  (use-package ggtags
    :ensure t
    :config
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                  (ggtags-mode 1))))
    )

#+END_SRC

* projectile

#+BEGIN_SRC emacs-lisp 
     ; 非常不错的包
    (use-package projectile
      :ensure t
      :config
      (projectile-global-mode)
      (setq projectile-completion-system 'ivy))

     ; 用于切换项目
    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode))

  (global-set-key (kbd "C-c C-p") 'counsel-projectile-switch-project)
#+END_SRC

* Dumb jump 
#+BEGIN_SRC emacs-lisp 

#+END_SRC
