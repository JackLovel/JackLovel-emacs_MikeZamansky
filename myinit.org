#+STARTIP: overview

* keyboard 
#+BEGIN_SRC emacs-lisp 
; C-c ' 修改emacs-lisp 区域内的代码
; C-x C-q edit file/directory name on dired mode  
#+END_SRC
* interface tweaks 
#+BEGIN_SRC emacs-lisp 
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  ; 高亮所在行
  (global-hl-line-mode t)

  ; 
  (setq save-interprogram-paste-before-kill t)
  (global-auto-revert-mode 1)
  (setq auto-revert-verbose nil)
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

* try 
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

* which key 
  Brings up some help 
#+BEGIN_SRC emacs-lisp 
(use-package which-key
  :ensure t
  :config 
  (which-key-mode))
#+END_SRC 

* the rest 
#+BEGIN_SRC emacs-lisp
  ;; buffer switch: C-x b 
  (setq indo-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  ;; buffer 列表
  (defalias 'list-buffers 'ibuffer)


  ;; 窗口跳转
  ;; M-o 1
  (use-package ace-window
    :bind ("M-o" . ace-window)
    :ensure t
    :init
    (progn
     ;; (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))

  ;; it looks like counsel is a requirement for swiper
  (use-package counsel
    :ensure t)

  (use-package ivy 
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))

  ;; 搜索: swiper
  (use-package swiper
    :ensure try
    :bind (("C-s" . swiper)
	   ("C-r" . swiper)
	   ("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      ))

  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))

  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
#+END_SRC

* theme
#+BEGIN_SRC emacs-lisp 
(use-package zenburn-theme
  :ensure t
  :config (load-theme 'zenburn t)
  )

(load-theme 'leuven t)
#+END_SRC

* reveal.js 

#+BEGIN_SRC emacs-lisp 
(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)
#+END_SRC 
* yasnippet 
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
:ensure t
:init 
(progn
(yas-global-mode 1))) 
#+END_SRC 
* undo tree 
#+BEGIN_SRC emacs-lisp 
 (use-package undo-tree
:ensure t
:init
(global-undo-tree-mode))
#+END_SRC
* reveal.js
#+BEGIN_SRC emacs-lisp 
(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)
#+END_SRC 
* flycheck 
#+BEGIN_SRC emacs-lisp 
(use-package flycheck
:ensure t
:init 
(global-flycheck-mode t)) 
#+END_SRC 
* python 
#+BEGIN_SRC emacs-lisp 
;  (use-package jedi 
;    :ensure t
;    :init 
;    (add-hook 'python-mode-hook 'jedi:setup)
;    (add-hook 'python-mode-hook 'jedi:ac-setup)) 


  (use-package elpy
    :ensure t 
    :config 
    (elpy-enable))

  (use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell))
#+END_SRC
* misc packages 
#+BEGIN_SRC emacs-lisp 
(use-package beacon
:ensure t 
:config 
(beacon-mode 1)
;(setq beacon-color "#666600")
)

(use-package hungry-delete
:ensure t
:config 
(global-hungry-delete-mode))

; 选择一个范围里的内容
(use-package expand-region
:ensure t 
:config 
(global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

* iedit and narrow / widen dwim
#+BEGIN_SRC emacs-lisp 
(use-package iedit
:ensure t)

; 选中一个范围的内容，并拿出去添加修改
; C-x n 
(defun narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or defun,
  whichever applies first. Narrowing to org-src-block actually
  calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer is
  already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (not p) (buffer-narrowed-p))(widen))
        ((region-active-p)
         (narrow-to-region (region-beginning) (region-end)))
        ((derived-mode-p 'org-mode)
         (cond ((ignore-errors (org-edit-src-code))
	 (delete-other-windows))
	 ((org-at-block-p)
	 (org-narrow-to-block))
	 (t (org-narrow-to-subtree))))
	 (t (narrow-to-defun))))
	 
	 (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
#+END_SRC
* load other files
#+BEGIN_SRC emacs-lisp 
  (defun load-if-exists (f)
    "检测文件是否存在"
    (if (file-readable-p f)
	(load-file f)))

  (load-if-exists "something.el")
#+END_SRC
* web mode
#+BEGIN_SRC emacs-lisp 
;  (use-package web-mode
;    :ensure t
;    :config
;    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
;    (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
;    (setq web-mode-engines-alist 
	 ; '(("django" . "\\.html\\'")))
   ; (setq web-mode-ac-sources-alist
;	  '(("css" . (ac-source-css-property))
;	  ("html". (ac-source-words-in-buffer ac-source-abbrev))
 ;         ("vue" . (ac-source-words-in-buffer ac-source-abbrev))))
;   (setq web-mode-enable-auto-closing t))
#+END_SRC 
* org mode 
#+BEGIN_SRC emacs-lisp
  (setenv "BROWSER" "firefox")

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (custom-set-variables
   '(org-directory "~/Dropbox/orgfiles")
   '(org-default-notes-file (concat org-directory "/notes.org"))
   '(org-export-html-postamble nil)
   '(org-hide-leading-stars t)
   '(org-startup-folded (quote overview))
   '(org-startup-indented t)
   '(org-confirm-babel-evaluate nil)
   '(org-src-fontify-natively t))

  (setq org-file-apps
        (append '(("\\.pdf\\'" . "evince %s")
                  ("\\.x?html?\\'" . "usr/bin/firefox %s")
                  ) org-file-apps ))

  (global-set-key "\C-ca" 'org-agenda)
  (setq org-agenda-start-on-weekday nil)
  (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
           ((agenda "")
            (alltodo "")))))

  (global-set-key (kbd "C-c c") 'org-capture)



  ;; 编辑 org 文件代码段里的代码
  (global-set-key (kbd "C-e") 'org-edit-special)
#+END_SRC
* shell 
#+BEGIN_SRC emacs-lisp 
  (use-package better-shell
    :ensure t
    :bind
    (("C-'" . better-shell-shell) ;open shell 
     ("C-;" . better-shell-remote-open)))
#+END_SRC

* c++ 
#+BEGIN_SRC emacs-lisp 
  (use-package ggtags
    :ensure t
    :config
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                  (ggtags-mode 1))))
    )

#+END_SRC

* projectile

#+BEGIN_SRC emacs-lisp 
     ; 非常不错的包
    (use-package projectile
      :ensure t
      :config
      (projectile-global-mode)
      (setq projectile-completion-system 'ivy))

     ; 用于切换项目
    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode))

  (global-set-key (kbd "C-c p") 'counsel-projectile-switch-project)
#+END_SRC

* Dumb jump 

#+BEGIN_SRC emacs-lisp 
; 函数定义跳转
  (use-package dumb-jump
    :ensure t
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
    :init(dumb-jump-mode))
#+END_SRC

* smartparents 
#+BEGIN_SRC emacs-lisp 
  (use-package smartparens
    :ensure t
    :hook (prog-mode . smartparens-mode)
    :custom
    (sp-escappe-quotes-after-insert nil)
    :config
    (require 'smartparens-config))

  (show-paren-mode t)
#+END_SRC
* ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
	       
                 ("web" (or (mode . web-mode) (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                 ("mu4e" (name . "\*mu4e\*"))
                 ("programming" (or
                                 (mode . python-mode)
                                 (mode . c++-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

#+END_SRC
* emmet mode 
#+BEGIN_SRC emacs-lisp 
  ; emmet mode 用于快速创建 html 和 css 代码片段
  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook 'emmet-mode))
#+END_SRC 

* treemacs 
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-move-forward-on-expand        nil
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-user-header-line-format       nil
            treemacs-width                         35
            treemacs-workspace-switch-cleanup      nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)

  (use-package treemacs-persp ;;treemacs-persective if you use perspective.el vs. persp-mode
    :after treemacs persp-mode ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

; 打开/关闭目录树
(global-set-key (kbd "<f8>") 'treemacs)

; treemacs-projectile 
#+END_SRC

* dired+ 
#+BEGIN_SRC emacs-lisp
;; dired mode 
;; f to vistit v to view 
;; o and C-o 
;; + mkdir directory 
;; m to mark 
;; c Copy, R rename/move D delete 

  ;; Dired+ missing from MELPA
  ;; https://emacs.stackexchange.com/questions/38553/dired-missing-from-melpa
  (load "~/.emacs.d/otherElFile/dired+.el")
  (require 'dired+)
#+END_SRC

* pcre2el 
#+BEGIN_SRC emacs-lisp
  (use-package pcre2el
    :ensure t
    :config
    (pcre-mode))


  (use-package wgrep
    :ensure t)

  (setq counsel-fzf-cmd "/usr/bin/fzf -f %s")
#+END_SRC

* git
#+BEGIN_SRC emacs-lisp
 (use-package magit
    :ensure t
    :init
    (progn
    (bind-key "C-x g" 'magit-status)
    ))

(setq magit-status-margin
  '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))
    (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))

    (global-set-key (kbd "M-g M-g") 'hydra-git-gutter/body)


    (use-package git-timemachine
    :ensure t
    )
  (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                              :hint nil)
    "
  Git gutter:
    _j_: next hunk        _s_tage hunk     _q_uit
    _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
    ^ ^                   _p_opup hunk
    _h_: first hunk
    _l_: last hunk        set start _R_evision
  "
    ("j" git-gutter:next-hunk)
    ("k" git-gutter:previous-hunk)
    ("h" (progn (goto-char (point-min))
                (git-gutter:next-hunk 1)))
    ("l" (progn (goto-char (point-min))
                (git-gutter:previous-hunk 1)))
    ("s" git-gutter:stage-hunk)
    ("r" git-gutter:revert-hunk)
    ("p" git-gutter:popup-hunk)
    ("R" git-gutter:set-start-revision)
    ("q" nil :color blue)
    ("Q" (progn (git-gutter-mode -1)
                ;; git-gutter-fringe doesn't seem to
                ;; clear the markup right away
                (sit-for 0.1)
                (git-gutter:clear))
         :color blue))
#+END_SRC

* pdf tool 
#+BEGIN_SRC emacs-lisp 
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install))

  (use-package org-pdftools
    :hook (org-load . org-pdftools-setup-link))

  (use-package org-noter-pdftools
    :after org-noter
    :config
    (with-eval-after-load 'pdf-annot
      (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+END_SRC


* latex 
* company 
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (global-company-mode t))
#+END_SRC

* auto yasnippet
#+BEGIN_SRC emacs-lisp 
  (use-package auto-yasnippet
    :ensure t)

#+END_SRC

* personal keymap 
#+BEGIN_SRC emacs-lisp
  ;; set up my own map 
  (define-prefix-command 'z-map)
  (global-set-key (kbd "C-z") 'z-map)
  (define-key z-map (kbd "k") 'compile)
  (define-key z-map (kbd "y") 'aya-create)
  (define-key z-map (kbd "e") 'aya-expand)
#+END_SRC

* silversearcher
#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t)
#+END_SRC

* wgrep 
#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :ensure t)

  (use-package wgrep-ag
    :ensure t)

  (require 'wgrep-ag)
#+END_SRC
